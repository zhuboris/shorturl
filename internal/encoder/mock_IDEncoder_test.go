// Code generated by mockery v2.36.0. DO NOT EDIT.

package encoder

import mock "github.com/stretchr/testify/mock"

// MockIDEncoder is an autogenerated mock type for the IDEncoder type
type MockIDEncoder struct {
	mock.Mock
}

type MockIDEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDEncoder) EXPECT() *MockIDEncoder_Expecter {
	return &MockIDEncoder_Expecter{mock: &_m.Mock}
}

// EncodeID provides a mock function with given fields: id, minLen
func (_m *MockIDEncoder) EncodeID(id uint, minLen uint) string {
	ret := _m.Called(id, minLen)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, uint) string); ok {
		r0 = rf(id, minLen)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIDEncoder_EncodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeID'
type MockIDEncoder_EncodeID_Call struct {
	*mock.Call
}

// EncodeID is a helper method to define mock.On call
//   - id uint
//   - minLen uint
func (_e *MockIDEncoder_Expecter) EncodeID(id interface{}, minLen interface{}) *MockIDEncoder_EncodeID_Call {
	return &MockIDEncoder_EncodeID_Call{Call: _e.mock.On("EncodeID", id, minLen)}
}

func (_c *MockIDEncoder_EncodeID_Call) Run(run func(id uint, minLen uint)) *MockIDEncoder_EncodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockIDEncoder_EncodeID_Call) Return(_a0 string) *MockIDEncoder_EncodeID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDEncoder_EncodeID_Call) RunAndReturn(run func(uint, uint) string) *MockIDEncoder_EncodeID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDEncoder creates a new instance of MockIDEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDEncoder {
	mock := &MockIDEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
