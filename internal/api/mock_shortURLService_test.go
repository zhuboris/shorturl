// Code generated by mockery v2.36.0. DO NOT EDIT.

package api

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockshortURLService is an autogenerated mock type for the shortURLService type
type MockshortURLService struct {
	mock.Mock
}

type MockshortURLService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockshortURLService) EXPECT() *MockshortURLService_Expecter {
	return &MockshortURLService_Expecter{mock: &_m.Mock}
}

// OriginalURL provides a mock function with given fields: ctx, shortURL
func (_m *MockshortURLService) OriginalURL(ctx context.Context, shortURL string) (string, error) {
	ret := _m.Called(ctx, shortURL)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockshortURLService_OriginalURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OriginalURL'
type MockshortURLService_OriginalURL_Call struct {
	*mock.Call
}

// OriginalURL is a helper method to define mock.On call
//   - ctx context.Context
//   - shortURL string
func (_e *MockshortURLService_Expecter) OriginalURL(ctx interface{}, shortURL interface{}) *MockshortURLService_OriginalURL_Call {
	return &MockshortURLService_OriginalURL_Call{Call: _e.mock.On("OriginalURL", ctx, shortURL)}
}

func (_c *MockshortURLService_OriginalURL_Call) Run(run func(ctx context.Context, shortURL string)) *MockshortURLService_OriginalURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockshortURLService_OriginalURL_Call) Return(_a0 string, _a1 error) *MockshortURLService_OriginalURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockshortURLService_OriginalURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockshortURLService_OriginalURL_Call {
	_c.Call.Return(run)
	return _c
}

// ShortURL provides a mock function with given fields: ctx, originalURL
func (_m *MockshortURLService) ShortURL(ctx context.Context, originalURL string) (string, error) {
	ret := _m.Called(ctx, originalURL)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, originalURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockshortURLService_ShortURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShortURL'
type MockshortURLService_ShortURL_Call struct {
	*mock.Call
}

// ShortURL is a helper method to define mock.On call
//   - ctx context.Context
//   - originalURL string
func (_e *MockshortURLService_Expecter) ShortURL(ctx interface{}, originalURL interface{}) *MockshortURLService_ShortURL_Call {
	return &MockshortURLService_ShortURL_Call{Call: _e.mock.On("ShortURL", ctx, originalURL)}
}

func (_c *MockshortURLService_ShortURL_Call) Run(run func(ctx context.Context, originalURL string)) *MockshortURLService_ShortURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockshortURLService_ShortURL_Call) Return(_a0 string, _a1 error) *MockshortURLService_ShortURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockshortURLService_ShortURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockshortURLService_ShortURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockshortURLService creates a new instance of MockshortURLService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockshortURLService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockshortURLService {
	mock := &MockshortURLService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
