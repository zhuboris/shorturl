// Code generated by mockery v2.36.0. DO NOT EDIT.

package urlservice

import (
	encoder "shorturl/internal/encoder"

	mock "github.com/stretchr/testify/mock"
)

// MockStorageOptionFunc is an autogenerated mock type for the StorageOptionFunc type
type MockStorageOptionFunc struct {
	mock.Mock
}

type MockStorageOptionFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageOptionFunc) EXPECT() *MockStorageOptionFunc_Expecter {
	return &MockStorageOptionFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: idEncoder, shortURLLength
func (_m *MockStorageOptionFunc) Execute(idEncoder encoder.IDEncoder, shortURLLength uint) urlStorage {
	ret := _m.Called(idEncoder, shortURLLength)

	var r0 urlStorage
	if rf, ok := ret.Get(0).(func(encoder.IDEncoder, uint) urlStorage); ok {
		r0 = rf(idEncoder, shortURLLength)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(urlStorage)
		}
	}

	return r0
}

// MockStorageOptionFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockStorageOptionFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - idEncoder encoder.IDEncoder
//   - shortURLLength uint
func (_e *MockStorageOptionFunc_Expecter) Execute(idEncoder interface{}, shortURLLength interface{}) *MockStorageOptionFunc_Execute_Call {
	return &MockStorageOptionFunc_Execute_Call{Call: _e.mock.On("Execute", idEncoder, shortURLLength)}
}

func (_c *MockStorageOptionFunc_Execute_Call) Run(run func(idEncoder encoder.IDEncoder, shortURLLength uint)) *MockStorageOptionFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoder.IDEncoder), args[1].(uint))
	})
	return _c
}

func (_c *MockStorageOptionFunc_Execute_Call) Return(_a0 urlStorage) *MockStorageOptionFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageOptionFunc_Execute_Call) RunAndReturn(run func(encoder.IDEncoder, uint) urlStorage) *MockStorageOptionFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageOptionFunc creates a new instance of MockStorageOptionFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageOptionFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageOptionFunc {
	mock := &MockStorageOptionFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
